{"version":3,"sources":["assets/images/logo.png","components/StatisticLabel/MoneyStatisticLabels.tsx","components/Product/Product.tsx","model/products.ts","screens/Dashboard/Dashboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MoneyStatisticLabel","label","amount","className","Col","sm","toLocaleString","Product","addSale","salesQuantity","moneyGenerated","product","image","defaultSaleOptions","enableShipping","commission","inputShipping","React","useState","saleOptions","setSaleOptions","useShipping","setUseShipping","useComission","setUseCommission","shippingPrice","setShippingPrice","isLoading","setIsLoading","toggleSaleOptions","ev","id","target","resetSaleOptions","newSale","a","profit","price","cost","sale","productName","name","shipping","style","backgroundImage","onClick","Button","type","CustomInput","onChange","e","checked","Input","placeholder","value","Number","Spinner","animation","variant","products","Dashboard","salesData","setSalesData","salesTotals","setSalesTotals","tithe","setTithe","promotion","setPromotion","getSalesData","fetch","process","response","json","useEffect","getSales","sales","body","JSON","stringify","method","headers","status","toast","newTotals","Object","keys","forEach","key","total","getTotalSumFromSalesDataKey","setAllDashboardTotals","map","item","filter","reduce","b","getProductMoney","data","length","lg","md","src","Logo","alt","Row","i","App","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","pauseOnHover","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b9f0b9c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7d433192.png\";","import React from 'react';\nimport {Col, ColProps} from \"reactstrap\";\nimport \"./MoneyStatisticLabels.scss\";\n\nexport interface IMoneyStatisticLabel {\n    label: string;\n    amount: number;\n    className?: string;\n}\n\nconst MoneyStatisticLabel: React.FunctionComponent<IMoneyStatisticLabel> = (\n    {\n        label,\n        amount,\n        className,\n    }\n) => {\n\n    return (\n        <div className={className}>\n            <Col\n                sm={12}\n                className=\"d-flex justify-content-center\"\n            >\n                <h4 className=\"amount\">RD$ {amount ? amount.toLocaleString('en-US') : 0}</h4>\n            </Col>\n            <Col\n                sm={12}\n                className=\"d-flex justify-content-center\"\n            >\n                <p>{label}</p>\n            </Col>\n        </div>\n    );\n};\n\nexport default MoneyStatisticLabel\n","import React, {ChangeEvent} from 'react';\nimport \"./Product.scss\";\nimport {IProductData} from \"../../model/products\";\nimport {Button, CustomInput, Input, Spinner} from \"reactstrap\";\nimport {ISale } from \"../../screens/Dashboard/Dashboard\";\n\nexport interface IProduct extends IProductData {\n    addSale: (data: ISale) => any;\n    salesQuantity?: number;\n    moneyGenerated?: number;\n}\n\nexport interface ISaleOptions {\n    enableShipping: boolean;\n    commission: boolean;\n    inputShipping: boolean;\n}\n\nconst Product: React.FunctionComponent<IProduct> = ({addSale, salesQuantity, moneyGenerated, ...product}) => {\n\n    const {image} = product;\n    const defaultSaleOptions: ISaleOptions = {enableShipping: false, commission: false, inputShipping: false};\n    const [saleOptions, setSaleOptions] = React.useState<ISaleOptions>(\n        defaultSaleOptions\n    );\n\n    const [useShipping, setUseShipping] = React.useState(false);\n    const [useComission, setUseCommission] = React.useState(false);\n    const [shippingPrice, setShippingPrice] = React.useState();\n    const [isLoading, setIsLoading] = React.useState(false);\n\n    const toggleSaleOptions = (ev: any) => {\n        const {id} = ev.target;\n        setSaleOptions({\n            ...defaultSaleOptions,\n            [id]: true,\n        })\n    };\n\n    const shippingOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const {checked} = e.target;\n        setUseShipping(checked);\n    };\n\n    const commissionOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const {checked} = e.target;\n        setUseCommission(checked);\n    };\n\n    const shippingPriceOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const {value} = e.target;\n\n        setShippingPrice(value ? Number(value) : value);\n    };\n\n    const resetSaleOptions = () => {\n        setUseCommission(false);\n        setUseShipping(false);\n        setSaleOptions(defaultSaleOptions);\n    };\n\n    const newSale = async () => {\n        const profit = product.price - product.cost;\n        const sale: ISale = {\n            price: product.price,\n            profit: profit,\n            productName: product.name,\n        };\n\n        if (useShipping) {\n            sale.shipping = shippingPrice;\n        }\n        if (useComission) {\n            sale.commission = product.commission;\n        }\n\n        resetSaleOptions();\n        setIsLoading(true);\n\n        await addSale(sale);\n\n        setIsLoading(false);\n    };\n    return (\n        <div className=\"card\">\n            <div\n                className=\"card-content\"\n            >\n                <div className=\"card-image-container overflow-hidden\">\n                    <div\n                        className=\"card-image\"\n                        style={{\n                            backgroundImage:\n                                `url('${image}')`\n                        }}\n                    >\n                    </div>\n                    <div className=\"add-sale-container\">\n                        <b className=\"reset-sale\" onClick={resetSaleOptions}>X</b>\n                        {\n                            saleOptions.commission || saleOptions.enableShipping || saleOptions.inputShipping ? null :\n                                <Button type=\"button\" id=\"enableShipping\" onClick={toggleSaleOptions}>\n                                    Añadir Venta\n                                </Button>\n                        }\n                        {\n                            !saleOptions.enableShipping ? null :\n                                <>\n                                    <CustomInput\n                                        type=\"switch\"\n                                        label=\"¿Incluye envio?\"\n                                        className=\"customized-switch\"\n                                        onChange={shippingOnChange}/>\n                                    <Button className=\"mt-3\" id={useShipping ? \"inputShipping\" : \"commission\"}\n                                            onClick={toggleSaleOptions}>Continuar</Button>\n                                </>\n                        }\n                        {\n                            !saleOptions.inputShipping ? null :\n                                <>\n                                    <Input placeholder=\"Precio de Envio\" name=\"shipping\" type=\"number\"\n                                           className=\"shipping-input\" value={shippingPrice}\n                                           onChange={shippingPriceOnChange}/>\n                                    <Button className=\"mt-3\" id=\"commission\"\n                                            onClick={toggleSaleOptions}>Continuar</Button>\n                                </>\n                        }\n\n                        {\n                            !saleOptions.commission ? null :\n                                <>\n                                    <CustomInput\n                                        type=\"switch\"\n                                        label=\"¿Incluye comisión?\"\n                                        className=\"customized-switch\"\n                                        onChange={commissionOnChange}/>\n                                    <Button className=\"mt-3\" onClick={newSale}>Fin</Button>\n                                </>\n                        }\n\n                        {\n                            !isLoading ? null :\n                                <Spinner animation=\"grow\" variant=\"secondary\"/>\n                        }\n                    </div>\n                </div>\n\n                <div className=\"card-title\">\n                    <div className=\"title\">\n                        <h4>Ventas: {salesQuantity}</h4>\n                        <h4>Ingresos: RD$ {moneyGenerated && moneyGenerated.toLocaleString('en-US')}</h4>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default Product;\n","export interface IProductData {\n  name: string;\n  price: number;\n  cost: number;\n  commission: number;\n  image: string;\n}\n\nconst products: IProductData[] = [\n  {\n    name: 'AKG',\n    price: 150,\n    cost: 40,\n    image: '/assets/images/products/AKG.png',\n    commission: 100,\n  },\n  {\n    name: 'LY002',\n    price: 600,\n    cost: 290,\n    image: '/assets/images/products/LY002.png',\n    commission: 100,\n  },\n  {\n    name: 'airpods serie 2',\n    price: 2500,\n    cost: 950,\n    image: '/assets/images/products/airpods serie 2.png',\n    commission: 100,\n  },\n  {\n    name: 'BX340BT',\n    price: 750,\n    cost: 470,\n    image: '/assets/images/products/BX340BT.png',\n    commission: 100,\n  },\n  {\n    name: 'K856',\n    price: 1150,\n    cost: 650,\n    image: '/assets/images/products/K856.png',\n    commission: 100,\n  },\n  {\n    name: 'QD21',\n    price: 600,\n    cost: 290,\n    image: '/assets/images/products/QD21.png',\n    commission: 100,\n  },\n  {\n    name: 'TG113',\n    price: 500,\n    cost: 260,\n    image: '/assets/images/products/TG113.png',\n    commission: 100,\n  },\n  {\n    name: 'TG117',\n    price: 750,\n    cost: 470,\n    image: '/assets/images/products/TG117.png',\n    commission: 100,\n  },\n  {\n    name: 'TG149',\n    price: 750,\n    cost: 470,\n    image: '/assets/images/products/TG149.png',\n    commission: 100,\n  },\n];\n\nexport default products\n","import React from 'react';\nimport {Col, Row, FormGroup, Label, Input} from 'reactstrap';\nimport {MoneyStatisticLabel, Product} from '../../components';\nimport Logo from \"../../assets/images/logo.png\"\nimport \"./Dashboard.scss\";\nimport products from \"../../model/products\";\nimport {toast} from \"react-toastify\";\n\nexport interface ISale {\n    price: number;\n    profit: number;\n    commission?: number;\n    shipping?: number;\n    productName: string;\n};\n\nexport interface ISalesData {\n    sales: ISale[];\n}\n\nexport type ITotals = {\n    [N in Exclude<keyof ISale, 'productName'>]: number;\n}\n\nconst Dashboard: React.FunctionComponent<any> = () => {\n    const [salesData, setSalesData] = React.useState<ISalesData>({} as any);\n    const [salesTotals, setSalesTotals] = React.useState<ITotals>({} as any);\n    const [tithe, setTithe] = React.useState(0);\n    const [promotion, setPromotion] = React.useState(0);\n    const tithePercent = 0.10;\n    const promotionPercent = 0.30;\n\n    const getSalesData = async () => {\n        const response = await fetch(`${process.env.REACT_APP_API}get-sales-data`);\n        const salesData: ISalesData = await response.json() as any;\n        await setSalesData(salesData);\n        return;\n    };\n\n    React.useEffect(() => {\n        const getSales = async () => {\n            await getSalesData();\n        };\n        getSales();\n    }, []);\n\n\n    const addSale = async (newSale: ISale) => {\n        const sales = salesData.sales || [];\n        const body = JSON.stringify({\n            ...salesData,\n            sales: [\n                ...sales,\n                newSale,\n            ],\n        });\n\n        const response = await fetch(`${process.env.REACT_APP_API}save-sales-data`, {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body,\n            }\n        );\n\n        if (response.status === 200) {\n            await getSalesData();\n            toast('¡Venta Exitosa!', { type: \"default\" });\n\n        } else {\n            toast('¡Error en la Venta!', { type: \"error\" });\n        }\n    };\n\n    const setTotalOf = (key: keyof ISale) => {\n        const total = getTotalSumFromSalesDataKey(key);\n        setSalesTotals({\n            ...salesTotals,\n            [key]: total,\n        })\n    };\n\n    const setAllDashboardTotals = () => {\n        const newTotals: ITotals = {} as any;\n        (Object.keys({shipping: 0, commission: 0, price: 0, profit: 0} as ITotals) as any)\n            .forEach((key: keyof ITotals) => {\n                const total = getTotalSumFromSalesDataKey(key);\n                newTotals[key] = total;\n            });\n        setSalesTotals(newTotals);\n\n        const tithe = newTotals.price * tithePercent;\n        setTithe(tithe);\n        const promotion = newTotals.profit * promotionPercent;\n        setPromotion(promotion);\n    };\n\n    React.useEffect(() => {\n        if (salesData.sales) setAllDashboardTotals();\n    }, [salesData]);\n\n\n    const getTotalSumFromSalesDataKey = (key: keyof ISale) =>\n        salesData.sales.map((item: ISale) => !item[key] ? null : item[key] as any)\n            .filter(item => !!item)\n            .reduce((a: number, b: number) => a + b, 0);\n\n    const getProductSales = (productName: string) => !salesData.sales ? 0 :\n        salesData.sales.filter(sale => sale.productName === productName).length;\n\n    const getProductMoney = (productName: string) => {\n        if (!salesData.sales) return 0;\n        const data = salesData.sales.filter(sale => sale.productName === productName);\n        if(!data.length) return 0;\n        const generated = data[0].profit * data.length;\n        return generated;\n    };\n\n    return (\n        <div\n            className=\"d-flex align-items-center flex-column\"\n        >\n            <Col lg={2} md={4} sm={4} className=\"p-4\">\n                <img src={Logo} alt=\"Logo AudSongs\" className=\"w-100\"/>\n            </Col>\n            <Col lg={10} md={10} sm={12} className=\"d-flex justify-content-center\">\n                <Row className=\"justify-content-center label-grid col-lg-10\">\n                    <MoneyStatisticLabel\n                        label=\"Vendido\"\n                        amount={salesTotals.price}\n                        className=\"total-label\"\n                    />\n                    <MoneyStatisticLabel\n                        label=\"Beneficio\"\n                        amount={salesTotals.profit}\n                        className=\"total-label\"\n                    />\n                    <MoneyStatisticLabel\n                        label=\"Comisiones\"\n                        amount={salesTotals.commission}\n                        className=\"total-label\"\n                    />\n                    <MoneyStatisticLabel\n                        label=\"Envios\"\n                        amount={salesTotals.shipping}\n                        className=\"total-label\"\n                    />\n                    <MoneyStatisticLabel\n                        label=\"Promoción\"\n                        amount={promotion}\n                        className=\"total-label\"\n                    />\n                    <MoneyStatisticLabel\n                        label=\"Diezmo\"\n                        amount={tithe}\n                        className=\"total-label\"\n                    />\n\n                </Row>\n            </Col>\n            <Col lg={8} md={10} sm={12} className=\"cards mt-3\">\n                {\n                    products.map((item, i) =>\n                        <Product\n                            {...item}\n                            salesQuantity={getProductSales(item.name)}\n                            moneyGenerated={getProductMoney(item.name) as number}\n                            addSale={addSale}\n                            key={i}\n                        />\n                    )}\n            </Col>\n        </div>\n    )\n};\n\nexport default Dashboard;\n\n\n// {/*<Col lg={10} md={12}>*/}\n// {/*    <Row className=\"d-flex justify-content-center\">*/}\n// {/*        <Col*/}\n// {/*            {...inputsSizes}*/}\n// {/*        >*/}\n// {/*            <FormGroup>*/}\n// {/*                <Label for=\"priceInput\">Precio</Label>*/}\n// {/*                <Input type=\"number\" name=\"price\" id=\"priceInput\"/>*/}\n// {/*            </FormGroup>*/}\n// {/*        </Col>*/}\n// {/*        <Col*/}\n// {/*            {...inputsSizes}*/}\n// {/*        >*/}\n// {/*            <FormGroup>*/}\n// {/*                <Label for=\"profitInput\">Beneficio</Label>*/}\n// {/*                <Input type=\"number\" name=\"profit\" id=\"profitInput\"/>*/}\n// {/*            </FormGroup>*/}\n// {/*        </Col>*/}\n// {/*        <Col*/}\n// {/*            {...inputsSizes}*/}\n// {/*        >*/}\n// {/*            <FormGroup>*/}\n// {/*                <Label for=\"shippingInput\">Precio de Envio</Label>*/}\n// {/*                <Input type=\"number\" name=\"shipping\" id=\"shippingInput\"/>*/}\n// {/*            </FormGroup>*/}\n// {/*        </Col>*/}\n// {/*    </Row>*/}\n// {/*</Col>*/}\n","import React from 'react';\nimport './App.css';\nimport {Dashboard} from \"./screens\";\nimport {ToastContainer} from \"react-toastify\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n        <ToastContainer\n            position=\"bottom-left\"\n            autoClose={5000}\n            hideProgressBar={false}\n            newestOnTop={false}\n            closeOnClick\n            rtl={false}\n            pauseOnFocusLoss\n            pauseOnHover\n        />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\nReactDOM.render(\n    <Router>\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>\n    </Router>\n    ,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}